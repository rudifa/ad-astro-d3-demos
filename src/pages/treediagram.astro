---
import ShoelaceLayout from '../layouts/ShoelaceLayout.astro';
import { TreeDiagram } from '../components/TreeDiagram.js';

const sampleData = {
  name: 'Granddad',
  children: [
    {
      name: 'Child 1',
      children: [{ name: 'Grandchild 1' }, { name: 'Grandchild 2' }],
    },
    {
      name: 'Child 2',
      children: [{ name: 'Grandchild 3' }],
    },
  ],
};
---

<ShoelaceLayout title='Tree Diagram'>
  <div class='container'>
    <h1 class='title'>Tree Diagram</h1>
    <button id='toggleState'>Current State: Unchanged</button>
    <TreeDiagram client:load data-json={JSON.stringify(sampleData)} />
  </div>
</ShoelaceLayout>

<script>
  const TreeState = {
    Null: 0,
    Unchanged: 1,
    Lowercase: 2,
    Uppercase: 3,
  } as const;

  type TreeStateType = (typeof TreeState)[keyof typeof TreeState];
  let currentState: TreeStateType = TreeState.Unchanged;

  const toggleButton = document.getElementById('toggleState');
  const treeDiagram = document.querySelector('tree-diagram') as HTMLElement & {
    data: any;
  };

  const originalData = JSON.parse(
    treeDiagram?.getAttribute('data-json') || '{}'
  );

  function updateTreeDiagram() {
    if (!treeDiagram) return;
    let transformedData;
    switch (currentState) {
      case TreeState.Null:
        transformedData = null;
        break;
      case TreeState.Unchanged:
        transformedData = originalData;
        break;
      case TreeState.Lowercase:
        transformedData = transformData(originalData, false);
        break;
      case TreeState.Uppercase:
        transformedData = transformData(originalData, true);
        break;
    }
    treeDiagram.setAttribute('data-json', JSON.stringify(transformedData));
    treeDiagram.data = transformedData;
  }

  function updateButtonText() {
    if (!toggleButton) return;
    const stateNames = Object.keys(TreeState);
    toggleButton.textContent = `Current State: ${stateNames[currentState]}`;
  }

  toggleButton?.addEventListener('click', () => {
    currentState = ((currentState + 1) % 4) as TreeStateType;
    updateButtonText();
    updateTreeDiagram();
  });

  function transformData(data: any, isUppercase: boolean): any {
    if (typeof data !== 'object') return data;
    const result = Array.isArray(data) ? [] : {};
    for (const key in data) {
      if (key === 'name') {
        result[key] = isUppercase
          ? data[key].toUpperCase()
          : data[key].toLowerCase();
      } else {
        result[key] = transformData(data[key], isUppercase);
      }
    }
    return result;
  }

  // Ensure the initial render happens
  updateButtonText();
  updateTreeDiagram();
</script>

<style>
  body,
  html {
    margin: 0;
    padding: 0;
    width: 100%;
    height: 100%;
  }
  .container {
    width: 100%;
    height: 100%;
    display: flex;
    flex-direction: column; /* Stack elements vertically */
    justify-content: flex-start; /* Align items to the start of the container */
    align-items: center; /* Center items horizontally */
    border: 2px solid black;
  }
  .title {
    padding-left: 20px; /* Add padding to move the <h1> to the right */
  }
  tree-diagram {
    width: 100%;
    height: 100%;
  }
</style>
